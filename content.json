{"meta":{"title":"the kingzez blog","subtitle":"step by step and never look back","description":"kingzez,blog,wangzezhi,vincent.w，王泽知","author":"kingzez","url":"http://kingzez.com"},"pages":[{"title":"","date":"2016-01-26T05:54:00.000Z","updated":"2015-08-26T09:42:18.000Z","comments":true,"path":"404.html","permalink":"http://kingzez.com/404.html","excerpt":"","keywords":null,"text":"404 Not Found","raw":null,"content":null},{"title":"Tags","date":"2016-01-26T05:54:00.000Z","updated":"2015-12-20T14:14:24.000Z","comments":true,"path":"tags/index.html","permalink":"http://kingzez.com/tags/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"Categories","date":"2016-01-26T05:54:00.000Z","updated":"2015-12-20T14:14:24.000Z","comments":true,"path":"categories/index.html","permalink":"http://kingzez.com/categories/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"About Me","date":"2015-07-16T14:53:23.000Z","updated":"2016-05-23T07:48:32.000Z","comments":true,"path":"about/index.html","permalink":"http://kingzez.com/about/index.html","excerpt":"","keywords":null,"text":"Step by step and never look back ◎","raw":null,"content":null},{"title":"","date":"2016-05-26T15:53:56.000Z","updated":"2016-05-26T15:53:56.000Z","comments":true,"path":"README.html","permalink":"http://kingzez.com/README.html","excerpt":"","keywords":null,"text":"Personal Blog Learn by doing","raw":null,"content":null}],"posts":[{"title":"Javascript中的枚举 [译]","slug":"Enums-in-javascript-译","date":"2016-05-23T02:35:39.000Z","updated":"2016-05-23T16:16:50.000Z","comments":true,"path":"2016/05/23/Enums-in-javascript-译/","link":"","permalink":"http://kingzez.com/2016/05/23/Enums-in-javascript-译/","excerpt":"Javascript中的枚举 ，你想这样定义枚举：","keywords":null,"text":"Javascript中的枚举 ，你想这样定义枚举：12345var SizeEnum = &#123; SMALL: 1, MEDIUM: 2, LARGE: 3,&#125;; 然后这样用它：1var mySize = SizeEnum.SMALL; 如果你想把枚举对应的值加上属性，你可以给它们加一个额外的对象：12345678910var SizeEnum = &#123; SMALL: 1, MEDIUM: 2, LARGE: 3, properties: &#123; 1: &#123;name: \"small\", value: 1, code: \"S\"&#125;, 2: &#123;name: \"medium\", value: 2, code: \"M\"&#125;, 3: &#123;name: \"large\", value: 3, code: \"L\"&#125; &#125;&#125;; 然后像这样用12var mySize = SizeEnum.MEDIUM;var myCode = SizeEnum.properties[mySize].code; // myCode == \"M\" 背景上面描述的是对JavaScript枚举思考很长时间得出的结果。它尝试最好的结合以原语为枚举值（序列化）和以对象作为值（允许值对应属性），进一步阅读了解我是怎么实现这一方法。 重新理解枚举我最近偶然发现自己在StackOverflow已经回答了几年的问题，读过一些评论之后思考了一下觉得这是一个很值得话题。 那么评论中都是那些问题呢？ 在JavaScript中写枚举最好的方法是？首先，在回答问题之前，先了解一下什么是枚举？在JavaScript中写意着什么。让我们先看一下枚举的定义：枚举是什么? 在数学和计算机科学理论中，一个集的枚举是列出某些有穷序列集的所有成员的程序，或者是一种特定类型对象的计数。这两种类型经常（但不总是）重叠。枚举是一个被命名的整型常数的集合–维基百科: 枚举 一个很好的例子：1enum WeekDay = &#123;MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY&#125;; 总结：枚举是一组预定义的常量中的一个制约变量。在上面的例子中WeekDay是一个枚举值，MONDAY、TUESDAY等是集合中的常量，也可称为枚举成员，如果我们声明一个变量：1WeekDay payDay; 我们可以把它分配给MONDAY，TUESDAY等任何一个常量，直到包括SUNDAY，但不是其他的什么，像12、labour day。…这给我们带来一个问题。它不能在JavaScript中实现javascript是弱类型语言，这意味着不需要事先声明一个特定类型的变量。在Java（强类型）中你可能这样写：1int i; // declares a variable named i which may hold integer values. 如果之后你要给它分配一个字符串，你需要这样：1i = \"Hello World\"; 但是编译器会返回错误，中断生成文件不像Javascript中:1234567var i;i = 10;i = \"Hello World\";i = 3.1415;i = true;i = ['my', 'array'];i = &#123;look: 'at', my: 'object'&#125;; 正如你所看到，我们声明了一个变量（通过关键字var）,但它在运行时类型是不受限制的。我们可以给他分配任何值。维基百科的措辞有点尴尬，但是你读到这行 A variable that has been declared as having an enumerated type can be assigned any of the enumerators as a value. 它表明，任何的枚举数都可被分配，但是什么都没有，所以它限制了可以分配给变量的值。在JavaScript中我们只是不能这样做，因此我们不能写真正的枚举，我们可以模仿C语言中提供的一些方便的方法，但要记住，我们只模仿它提供的语法糖。 在javascript中写枚举我是从强类型的java中转过来的，但也很长时间没有写枚举了，因此Java的编程给我带来一些不同的解决方法来模仿写出枚举。 常数，常常是i、c、w。命名约定只列出你使用类顶部的常数1234public static final int DAYS_MONDAY = 0;public static final int DAYS_TUESDAY = 1;// ..public static final int DAYS_SUNDAY = 6; 简单常量类像上面简单的例子，把常量放到专用的类中用于复用：123456public class DaysEnum &#123; public static final int MONDAY = 0; public static final int TUESDAY = 1; // .. public static final int SUNDAY = 6;&#125; 常数实例类 Java的枚举促使了js枚举的仿制，它使用一个专用的私有构造函数类（除了类本身没有被实例化）和使用实例本身作为枚举值：1234567public class DaysEnum &#123; private DaysEnum() &#123;&#125; public static final DaysEnum MONDAY = new DaysEnum(); public static final DaysEnum TUESDAY = new DaysEnum(); // .. public static final DaysEnum SUNDAY = new DaysEnum();&#125; 另外，使用枚举实例的枚举数是一种优雅的方式，这使得这样模拟枚举类型的安全，与其他两个变量比，枚举的变量将是整数：12int payDay = DAYS_FRIDAY; // variation 1int payDay = DaysEnum.FRIDAY; // variation 2 它仍然有可能指定一个完全错误的值，如128这样的枚举。相比之下，第三的变异实际上限制可以被分配到枚举列出枚举成员的值：12DaysEnum payDay = DaysEnum.FRIDAY; // okDaysEnum payDay = 128; // compiler error 作为新增加的亮点，第三枚举模式允许我们添加额外的字段，例如把一天加上名字，甚至方法（isWeekendDay()为例）的枚举。因此，从Java中了解的这些模式，我在StackOverflow上建议JavaScript使用第三枚举的方法来写。目前仍是在StackOverFlow上得到的星最多的，因此我要解释一下为什么，然后告诉你我个人认为在JavaScript中获得最大的收益就是要尽可能的少写枚举。 那么替代这种方法的又是什么呢？ 这样的方法又有什么错误呢？ 第三枚举在JavaScript中是这样：123456var DaysEnum = &#123; MONDAY: &#123;&#125;, // optionally you can give the object properties and methods TUESDAY: &#123;&#125;, // .. SUNDAY: &#123;&#125;&#125;; 但是，我现在不再推荐这种风格，不要再使用它了。为什么不呢?因为在评论中有人指出关于线程的问题，当数据序列化的时候这将出现一些问题，为了理解为什么这样，让我们来看一看当我们把DaysEnum中的一个枚举值作为一个对象的字段会发生什么：123456789101112var myObject = &#123; payDay: DaysEnum.MONDAY&#125;;var yesterday = DaysEnum.THURSDAY, today = DaysEnum.MONDAY;if (yesterday == myObject.payDay) alert(\"Yesterday was pay day... but not today...\");else if (today == myObject.payDay) alert(\"Today is pay day! Yippie!!!\");else alert(\"Neither yesterday nor today are pay days... I'm broke!\"); 到目前为止很好，它会alert出我们预期的”Today is pay day! Yippie!!!”(今天是周一)，但是我们将myObject序列化转成JSON,再将它反序列化：123456789var serialized = JSON.stringify(myObject); alert(\"serialized myObject: \" + serialized);var deserializedObject = JSON.parse(serialized);if (yesterday == deserializedObject.payDay) alert(\"Yesterday was pay day... but not today...\");else if (today == deserializedObject.payDay) alert(\"Today is pay day! Yippie!!!\");else alert(\"Neither yesterday nor today are pay days... I'm broke!\"); 这个结果是”Neither yesterday nor today are pay days… I’m broke!”原因是依靠反序列化JSON.parse创建一个新的对象作为payDay的值，这个新对象不同于DaysEnum.FRIDAY因此在比较之后会错误。 我认为这样解决问题不是一个很好的方法，能系列化和反序列化枚举是很重要的，而不能忽视的。这就是为什么我建议不要使用这种模式，相反的是用第二枚举解决问题就不会出现这样的问题：123456var DaysEnum = &#123; MONDAY: \"monday\", TUESDAY: \"tuesday\", // .. SUNDAY: \"sunday\"&#125;; （或者你可以用数字代替字符串的值，都可以达到同样的效果），让我们检查一下这个做系列化的安全性：12345678910111213var myObject = &#123; payDay: DaysEnum.FRIDAY&#125;;var serialized = JSON.stringify(myObject); alert(\"serialized myObject: \" + serialized);var deserializedObject = JSON.parse(serialized);if (yesterday == deserializedObject.payDay) alert(\"Yesterday was pay day... but not today...\");else if (today == deserializedObject.payDay) alert(\"Today is pay day! Yippie!!!\");else alert(\"Neither yesterday not today are pay days... I'm broke!\"); 正如预期的那样，结果是”Today is pay day! Yippie!!!”。但是我绝得给枚举的添加字段和方法真的很棒，我们可以这样做：12345var SizeEnum = &#123; SMALL: &#123;name: \"small\", value: 1, code: \"S\"&#125;, MEDIUM: &#123;name: \"medium\", value: 2, code: \"M\"&#125;, LARGE: &#123;name: \"large\", value: 3, code: \"L\"&#125;,&#125;; 但是可以说这不需要序列化和反序列化，我们只需要给额外的对象增加一个属性W:12345678910var SizeEnum = &#123; SMALL: 1, MEDIUM: 2, LARGE: 3, properties: &#123; 1: &#123;name: \"small\", value: 1, code: \"S\"&#125;, 2: &#123;name: \"medium\", value: 2, code: \"M\"&#125;, 3: &#123;name: \"large\", value: 3, code: \"L\"&#125; &#125;&#125;; 这样我们能够取到枚举数的属性值，像这样：12var mySize = SizeEnum.MEDIUM;var myCode = SizeEnum.properties[mySize].code; // myCode == \"M\" ……不可否认优雅的方式。我想说的是，对于一个枚举值的序列化/反序列化的能力远比在实例上属性更重要。 Object.freeze在类型安全的语言中，枚举的这些类型都是不变的，值得集合不改变也不做自身的常量值，在JavaScript中，任何时候我们都可以覆盖赋值所有的常数，或添加新的属性，如果你想避免这种情况，可以看一下Objcet.freeze Object.freeze() 方法可以冻结一个对象。冻结对象是指那些不能添加新的属性，不能修改已有属性的值，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性的对象。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。 听起来还真是一个很需要的方法，是吗~？ 因为不是所有的浏览器都支持，你应该在使用前测试是否可用：12if (Object.freeze) Object.freeze(DaysEnum); 好了，就到这~JavaScript中的枚举，写代码去！ 第一次翻译外文，水平有限，如有误，请批正。","raw":null,"content":null,"categories":[{"name":"js","slug":"js","permalink":"http://kingzez.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"undefined和null的区别","slug":"undefined和null的区别","date":"2016-05-19T08:37:31.000Z","updated":"2016-05-19T09:26:18.000Z","comments":true,"path":"2016/05/19/undefined和null的区别/","link":"","permalink":"http://kingzez.com/2016/05/19/undefined和null的区别/","excerpt":"js中的undefined和null是何等的相似，几乎是一样的，所以要说一下细微的区别，先动手操作一下，在浏览器Console中执行：","keywords":null,"text":"js中的undefined和null是何等的相似，几乎是一样的，所以要说一下细微的区别，先动手操作一下，在浏览器Console中执行：1undefined == null //返回值 true 这说明一定情况下undefined和null可以转化成false。执行123Number(undefined) //返回值 NANNumber(null) //返回值 0 这也是说明undefined和null的区别所在。执行123typeof(undefined) //返回值 \"undefined\"typeof(null) //返回值 \"object\" 但是以上的区别在实际使用中又不是很明显。undefined表示”缺少值”，表示此处应该有一个值，但是还没有定义，这种情况下使用undefined，常用方法： 变量被声明了，但没有赋值时，就等于undefined 调用函数时，应该提供的参数没有提供，该参数等于undefined 对象没有赋值的属性，该属性的值为undefined 函数没有返回值，默认返回的是undefined 1234567891011121314var a;a // undefinedfunction test(b)&#123; console.log(b)&#125;test(); //undefinedvar newObj = new Object(); newObj.hello;// undefinedvar c = test();c //undefined null表示”没有对象”，表示此处不应该有值，这种情况下使用null，常用方法： 作为函数的参数，表示该函数的参数不是对象 作为对象原型链的终点 12Object.getPrototypeOf(Object.prototype)// null 就酱~","raw":null,"content":null,"categories":[{"name":"js","slug":"js","permalink":"http://kingzez.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"Blog无图片时添加随机thumbnail","slug":"Blog无图片时添加随机thumbnail","date":"2016-05-18T11:03:25.000Z","updated":"2016-05-22T14:01:41.000Z","comments":true,"path":"2016/05/18/Blog无图片时添加随机thumbnail/","link":"","permalink":"http://kingzez.com/2016/05/18/Blog无图片时添加随机thumbnail/","excerpt":"有的文章中没有添加如上这种banner图，所以呢，博客右侧的Recent的缩略图只会显示默认的图，","keywords":null,"text":"有的文章中没有添加如上这种banner图，所以呢，博客右侧的Recent的缩略图只会显示默认的图，有时候连续五篇文章都没有图那就连续五张缩略图一样了，很不美观，不喜欢~所以就把它改成没有缩略图情况下随机变换缩略图，不多说，上代码：首先需要通过Math对象生成出一个随机数，random方法可以生成一个0~1之间的随机数，得到的数再乘10，结果即为0~10之间的一个随机数，再通过round方法对该随机数进行四舍五入得到一个整数1var randomBgIndex = Math.round(Math.random() * 10); 再声明一个数组用来存放缩略图的路径12345678910111213var thumbnailBg = []; thumbnailBg[0] = \"css/images/thumb-default-small.png\"; thumbnailBg[1] = \"css/images/thumb-default-small1.png\"; thumbnailBg[2] = \"css/images/thumb-default-small2.png\"; thumbnailBg[3] = \"css/images/thumb-default-small3.png\"; thumbnailBg[4] = \"css/images/thumb-default-small4.png\"; thumbnailBg[5] = \"css/images/thumb-default-small5.png\"; thumbnailBg[6] = \"css/images/thumb-default-small6.png\"; thumbnailBg[7] = \"css/images/thumb-default-small7.png\"; thumbnailBg[8] = \"css/images/thumb-default-small8.png\"; thumbnailBg[9] = \"css/images/thumb-default-small9.png\"; thumbnailBg[10] = \"css/images/thumb-default-small10.png\"; &lt;span style=\"background-image:url(&lt;%= thumbnailBg[randomBgIndex] %&gt;)\" class=\"thumbnail-image thumbnail-none\"&gt;&lt;/span&gt; &lt;% %&gt;这里是blog用的ejs语法thumbnailBg[randomBgIndex]用来取随机产生的值。 完整的代码：1234567891011121314var randomBgIndex = Math.round(Math.random() * 10);var thumbnailBg = []; thumbnailBg[0] = \"css/images/thumb-default-small.png\"; thumbnailBg[1] = \"css/images/thumb-default-small1.png\"; thumbnailBg[2] = \"css/images/thumb-default-small2.png\"; thumbnailBg[3] = \"css/images/thumb-default-small3.png\"; thumbnailBg[4] = \"css/images/thumb-default-small4.png\"; thumbnailBg[5] = \"css/images/thumb-default-small5.png\"; thumbnailBg[6] = \"css/images/thumb-default-small6.png\"; thumbnailBg[7] = \"css/images/thumb-default-small7.png\"; thumbnailBg[8] = \"css/images/thumb-default-small8.png\"; thumbnailBg[9] = \"css/images/thumb-default-small9.png\"; thumbnailBg[10] = \"css/images/thumb-default-small10.png\"; &lt;span style=\"background-image:url(&lt;%= thumbnailBg[randomBgIndex] %&gt;)\" class=\"thumbnail-image thumbnail-none\"&gt;&lt;/span&gt; OK~","raw":null,"content":null,"categories":[{"name":"js","slug":"js","permalink":"http://kingzez.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"js通过hash方式数组去重","slug":"js通过hash方式数组去重","date":"2016-05-17T14:53:15.000Z","updated":"2016-05-19T10:57:52.000Z","comments":true,"path":"2016/05/17/js通过hash方式数组去重/","link":"","permalink":"http://kingzez.com/2016/05/17/js通过hash方式数组去重/","excerpt":"之前面试中遇到过数组去重的问题，方法很多，但是相对来说比较好的方式是通过hash方式来进行去重，这样的效率要高很多，以下是具体代码：","keywords":null,"text":"之前面试中遇到过数组去重的问题，方法很多，但是相对来说比较好的方式是通过hash方式来进行去重，这样的效率要高很多，以下是具体代码： 12345678910111213141516var newArr = [1,2,2,3,3,3,3,4,4,5,5,6,6,7,8,8,8,9,9,9,9];function killArray(arr)&#123; var hash = &#123;&#125;, result = []; for(var i=0; i&lt;arr.length; i++)&#123; if(!hash[arr[i]])&#123; hash[arr[i]] = true; result.push(arr[i]); &#125; &#125; return result;&#125;killArray(newArr); //输出[1,2,3,4,5,6,7,8,9] 完成~","raw":null,"content":null,"categories":[{"name":"js","slug":"js","permalink":"http://kingzez.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"可继承的CSS属性","slug":"可继承的CSS属性","date":"2016-05-14T16:35:29.000Z","updated":"2016-05-17T14:01:31.000Z","comments":true,"path":"2016/05/15/可继承的CSS属性/","link":"","permalink":"http://kingzez.com/2016/05/15/可继承的CSS属性/","excerpt":"在网上搜集查找相对全一点的可继承的css属性：","keywords":null,"text":"在网上搜集查找相对全一点的可继承的css属性： azimuth 设置或检索当前声音的音场角度 border-collapse 设置表格的边框是否被合并为一个单一的边框，还是像在标准的 HTML 中那样分开显示(separate collapse) border-spacing 设置相邻单元格的边框间的距离（length length） caption-side 规定表格标题的放置方式(top bottom) color 颜色(…) cursor 光标的类型(pointer help wait…) direction 文本方向设置(ltr rtl) elevation 设置或检索当前声音的音源仰角(angle below level above higher lower) empty-cells 设置是否显示表格中的空单元格(hide show) font-family 字体(…) font-size 字体大小 font-style 字体风格(normal italic oblique) font-variant 设置小型大写字母的字体显示文本(normal small-caps) font-weight 粗细 font 字体 letter-spacing 字符间距 line-height 行距 list-style-image 使用图像替换列表项的标记 list-style-position 放置列表标记的位置 list-style-type 列表标记类型(none disc circle square decimal…) list-style 设置所有的列表属性 orphans 打印中设置元素放在页面底部时所允许的最少文本行数(number) pitch-range 听觉中指定声音的变化(number) pitch 听觉中指定说话的声音(frequency x-low low medium high x-high) quotes 设置嵌套引用的引号类型(string string string string) richness 听觉中指定声音的丰富度(number) speak-header 指定如何处理表头文件(always once) speak-numeral 指定如何讲数字(digits continous) speak-punctuation 指定如何讲标点符号(none code) speak 指定内容用语音讲出(normal none spell-out) speech-rate 讲话的速度(number x-slow slow fast x-fast faster slower) stress 讲话声音中的强调(number) text-align 元素中的文本居中 text-indent 文本首行的缩进(lenght %) text-transform 控制文本的大小写(none captalize uppercase lowercase) visibility 元素是否可见(visible hidden collapse) voice-family 特定声音库名称的优先级(specific-voice generic-voice) volume 讲出的音量(number % silent x-soft medium loud x-loud) white-space 设置处理元素中的空白(normal pre nowrap pre-wrap pre-line) widows 窗口 word-spacing 单词字间距(normal length)","raw":null,"content":null,"categories":[{"name":"CSS","slug":"CSS","permalink":"http://kingzez.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://kingzez.com/tags/CSS/"}]},{"title":"JavaScript Kata: Title Case","slug":"JavaScript-Kata-Title-Case","date":"2016-04-29T09:32:50.000Z","updated":"2016-04-29T09:45:47.000Z","comments":true,"path":"2016/04/29/JavaScript-Kata-Title-Case/","link":"","permalink":"http://kingzez.com/2016/04/29/JavaScript-Kata-Title-Case/","excerpt":"A string is considered to be in title case if each word in the string is either (a) capitalised (that is, only the first","keywords":null,"text":"A string is considered to be in title case if each word in the string is either (a) capitalised (that is, only the firstletter of the word is in upper case) or (b) considered to be an exception and put entirely into lower case unless it is the first word, which is always capitalised. Write a function that will convert a string into title case, given an optional list of exceptions (minor words). The list of minor words will be given as a string with each word separated by a space. Your function should ignore the case of the minor words string – it should behave in the same way even if the case of the minor word string is changed. Arguments (Haskell)First argument: space-delimited list of minor words that must always be lowercase except for the first word in the string.Second argument: the original string to be converted. Arguments (Other languages) First argument (required): the original string to be converted. Second argument (optional): space-delimited list of minor words that must always be lowercase except for the first word in the string. The JavaScript/CoffeeScript tests will pass undefined when this argument is unused. Example123titleCase('a clash of KINGS', 'a an the of') // should return: 'A Clash of Kings'titleCase('THE WIND IN THE WILLOWS', 'The In') // should return: 'The Wind in the Willows'titleCase('the quick brown fox') // should return: 'The Quick Brown Fox'","raw":null,"content":null,"categories":[{"name":"Kata","slug":"Kata","permalink":"http://kingzez.com/categories/Kata/"}],"tags":[{"name":"Kata","slug":"Kata","permalink":"http://kingzez.com/tags/Kata/"},{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"JavaScript Kata: Find the odd int","slug":"JavaScript-Kata-Find-the-odd-int","date":"2016-04-26T15:30:33.000Z","updated":"2016-04-27T10:29:24.000Z","comments":true,"path":"2016/04/26/JavaScript-Kata-Find-the-odd-int/","link":"","permalink":"http://kingzez.com/2016/04/26/JavaScript-Kata-Find-the-odd-int/","excerpt":"Description:Given an array, find the int that appears an odd number of times.","keywords":null,"text":"Description:Given an array, find the int that appears an odd number of times.There will always be only one integer that appears an odd number of times. My Solution:12345678function findOdd(A) &#123; //happy coding! var n = 0; for(var i=0; i&lt;A.length; i++)&#123; n = n^A[i]; &#125; return n;&#125; Test Cases:12345678910111213141516171819202122232425262728293031function doTest(a, n) &#123; console.log(\"A = \", a); console.log(\"n = \", n); Test.assertEquals(findOdd(a), n);&#125;Test.describe('Example tests', function() &#123; doTest([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5], 5); doTest([1,1,2,-2,5,2,4,4,-1,-2,5], -1); doTest([20,1,1,2,2,3,3,5,5,4,20,4,5], 5); doTest([10], 10); doTest([1,1,1,1,1,1,10,1,1,1,1], 10); doTest([5,4,3,2,1,5,4,3,2,10,10], 1);&#125;);Test.describe('Random tests', function() &#123; var i, sz, a, j, n; for(i = 0; i &lt; 40; ++i) &#123; sz = Math.round(Math.random()*1000+50); if (!sz%2) &#123; ++sz; &#125; a = []; for(j = 0; j &lt; sz - 1; j+=2) &#123; n = Math.round(Math.random()*1000); a.push(n); a.push(n); &#125; n = Math.round(Math.random()*1000); a.push(n); Test.assertEquals(findOdd(a), n); &#125;&#125;);","raw":null,"content":null,"categories":[{"name":"Kata","slug":"Kata","permalink":"http://kingzez.com/categories/Kata/"}],"tags":[{"name":"Kata","slug":"Kata","permalink":"http://kingzez.com/tags/Kata/"},{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"JavaScript Kata: Sort with Arrow Functions","slug":"JavaScript-Kata-Sort-with-Arrow-Functions","date":"2016-04-25T15:38:01.000Z","updated":"2016-04-26T07:37:09.000Z","comments":true,"path":"2016/04/25/JavaScript-Kata-Sort-with-Arrow-Functions/","link":"","permalink":"http://kingzez.com/2016/04/25/JavaScript-Kata-Sort-with-Arrow-Functions/","excerpt":"Sort and Order people by their age using Arrow Functions","keywords":null,"text":"Sort and Order people by their age using Arrow Functions Task Your task is to order a list containg people objects by age using the new Javascript Arrow Functions Input Input will be a valid array with People objects containing an Age and Name Output Output will be a valid sorted array with People objects sorted by Age in ascending order Answer Is 1234var OrderPeople = function(people)&#123; return people.sort( (obj1,obj2) =&gt; obj1.age - obj2.age ); &#125;","raw":null,"content":null,"categories":[{"name":"Kata","slug":"Kata","permalink":"http://kingzez.com/categories/Kata/"}],"tags":[{"name":"Kata","slug":"Kata","permalink":"http://kingzez.com/tags/Kata/"},{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"Mac Apache","slug":"Mac-Apache","date":"2016-03-29T11:06:14.000Z","updated":"2016-03-29T11:07:09.000Z","comments":true,"path":"2016/03/29/Mac-Apache/","link":"","permalink":"http://kingzez.com/2016/03/29/Mac-Apache/","excerpt":"","keywords":null,"text":"./configure –prefix=/usr/local/apache2 –enable-mods-shared=most","raw":null,"content":null,"categories":[],"tags":[]},{"title":"人称git核弹级 filter-branch ","slug":"人称git核弹级 filter-branch","date":"2015-12-20T13:05:59.000Z","updated":"2016-05-20T16:18:30.000Z","comments":true,"path":"2015/12/20/人称git核弹级 filter-branch/","link":"","permalink":"http://kingzez.com/2015/12/20/人称git核弹级 filter-branch/","excerpt":"都说“占小便宜吃大亏”,一点不假，听说GitHub Education的服务很不错，就用自己的edu.cn邮箱把GitHub的邮箱改了，接着去Get the Student Developer Pack。","keywords":null,"text":"都说“占小便宜吃大亏”,一点不假，听说GitHub Education的服务很不错，就用自己的edu.cn邮箱把GitHub的邮箱改了，接着去Get the Student Developer Pack。 静待回馈email，But！！！被拒绝了，原因是不认edu.cn的邮箱，好吧算了被拒绝也没什么好说的了，回到我的GitHub主页，顿时眼前一白，我的contributions图消失了，虽说不是很多但也是代表自己的contributions，好了不说废话了，解决竟是git的核弹级的 filter-branch。解决方法为全局性地更换电子邮件地址代码如下 123456789git filter-branch --commit-filter ' if [ \"$GIT_AUTHOR_EMAIL\" = w@W-MacBook-Pro.local ]; then GIT_AUTHOR_NAME=kingzez; GIT_AUTHOR_EMAIL=kingzez@sina.com; git commit-tree \"$@\"; else git commit-tree \"$@\"; fi' HEAD 接下来解释一下代码含义：这次的一个失误让我也发现了一个容易忽视的问题，在重装Mac后忘记了配置本地的git config，所以造成了我本地不合法的git用户邮箱（w@W-MacBook-Pro.local）其中上传的部分内容不在contributions上显示，（另外还有我的edu.cn的邮箱，针对我个人而言需要修改两次，）原因是contributions图是对应git用户配置显示的，这是我更改了邮箱后图消失的原因，Github系统找不到现在邮箱的git用户，所以我现在要操作的是 1git config --global user.name \"kingzez\" 1git config --global user.email \"kingzez@sina.com\" 操作后为了安全起见，在检查一遍1git config --list 然后操作核弹级的filter-branch --commit-filter 这个必须要小心，千万要确认自己修改的邮箱是正确的，这个会遍历并重写所有提交历史到你新的邮箱上，命令完成后需要强推 git push -f，到Github主页刷新，我的contributions图又回来了，但是其中可能是以前的操作不当恢复的不是很完整，能恢复大部分已经很好了，原本只是改了一个邮箱，结果折腾这么一大圈。","raw":null,"content":null,"categories":[{"name":"git","slug":"git","permalink":"http://kingzez.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://kingzez.com/tags/git/"},{"name":"github","slug":"github","permalink":"http://kingzez.com/tags/github/"}]},{"title":"如何完全删除gitosis","slug":"如何完全删除gitosis","date":"2015-10-19T15:04:24.000Z","updated":"2015-12-19T16:39:26.000Z","comments":true,"path":"2015/10/19/如何完全删除gitosis/","link":"","permalink":"http://kingzez.com/2015/10/19/如何完全删除gitosis/","excerpt":"如果你是用apt安装的，那很简单apt-get purge gitosis就可以了。","keywords":null,"text":"如果你是用apt安装的，那很简单apt-get purge gitosis就可以了。如果你是用源码安装的，那么就麻烦一点了。首先删除/usr/local/bin下的文件或是/bin/下的文件12sudo rm gitosis*sudo rm easy* 然后，到～/repositories目录下，删除gitosis-admin.git目录1sudo rm -fr gitosis-admin.git 最关键的是，你需要编辑用来安装gitosis的用户home目录下的一些东西，假如我用git这个用户安装，那么12su – gitvi .ssh/authorized_keys 把含有gitosis相关的所有全部删除就ok了。","raw":null,"content":null,"categories":[{"name":"git","slug":"git","permalink":"http://kingzez.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://kingzez.com/tags/git/"},{"name":"gitosis","slug":"gitosis","permalink":"http://kingzez.com/tags/gitosis/"}]},{"title":"CentOS添加和删除用户","slug":"CentOS添加和删除用户","date":"2015-10-19T15:00:54.000Z","updated":"2016-01-15T14:45:26.000Z","comments":true,"path":"2015/10/19/CentOS添加和删除用户/","link":"","permalink":"http://kingzez.com/2015/10/19/CentOS添加和删除用户/","excerpt":"在CentOS下添加和删除用户命令：","keywords":null,"text":"在CentOS下添加和删除用户命令： 添加用户 test：1adduser test 修改test密码：1passwd test 删除用户test:1userdel test 删除用户以及用户目录：1userdel -f test","raw":null,"content":null,"categories":[{"name":"CentOS","slug":"CentOS","permalink":"http://kingzez.com/categories/CentOS/"}],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://kingzez.com/tags/CentOS/"}]},{"title":"解决Mac os ssh登陆CentOS中文乱码方法","slug":"解决Mac os ssh登陆CentOS中文乱码方法","date":"2015-10-19T08:58:49.000Z","updated":"2015-12-19T16:43:10.000Z","comments":true,"path":"2015/10/19/解决Mac os ssh登陆CentOS中文乱码方法/","link":"","permalink":"http://kingzez.com/2015/10/19/解决Mac os ssh登陆CentOS中文乱码方法/","excerpt":"解决Mac OS ssh登陆CentOS中文乱码方法","keywords":null,"text":"解决Mac OS ssh登陆CentOS中文乱码方法 这种情况一般是终端和服务器的字符集不匹配，MacOSX下默认的是utf8字符集,所以编辑 /etc/sshconfig，注释此行“ SendEnv LANG LC*”即可，1sudo vi /etc/ssh_config， 注释此行1SendEnv LANG LC_”","raw":null,"content":null,"categories":[{"name":"Mac","slug":"Mac","permalink":"http://kingzez.com/categories/Mac/"}],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://kingzez.com/tags/CentOS/"},{"name":"Mac","slug":"Mac","permalink":"http://kingzez.com/tags/Mac/"},{"name":"ssh","slug":"ssh","permalink":"http://kingzez.com/tags/ssh/"}]},{"title":"CentOS下搭建git服务器","slug":"CentOS下搭建git服务器","date":"2015-10-18T15:46:02.000Z","updated":"2016-05-17T16:44:11.000Z","comments":true,"path":"2015/10/18/CentOS下搭建git服务器/","link":"","permalink":"http://kingzez.com/2015/10/18/CentOS下搭建git服务器/","excerpt":"CentOS下搭建git服务器 通过源码编译安装，git-1.9.5.tar.gz安装git","keywords":null,"text":"CentOS下搭建git服务器 通过源码编译安装，git-1.9.5.tar.gz安装git 123456yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-develwget http://git-core.googlecode.com/files/git-1.9.5.tar.gztar zxvf git-1.9.5.tar.gzcd git-1.9.5make prefix=/usr/local allmake prefix=/usr/local install root用户运行查看版本号：git –version 安装gitosis需要安装python，python-setuptools依赖 1234yum install python python-setuptoolsgit clone git://github.com/res0nat0r/gitosis.gitcd gitosispython setup.py install 在客户端开发本上生成公共密钥（必须）·用来初始化gitosis 12ssh-keygen -t rsa #不需要密码,一路回车就行(在本地操作)scp ~/.ssh/id_rsa.pub root@xxx:/tmp/ # 上传你的ssh public key到服务器 初始化gitosis[服务器端] 1234adduser git # 新增一个git用户(先添加用户组 groupadd git)su git # 切换倒git用户下gitosis-init &lt; /tmp/id_rsa.pub # id_rsa.pub是刚刚传过来的,注意放在/tmp目录主要是因为此目录权限所有人都有定权限的rm /tmp/id_rsa.pub # id_rsa.pub已经无用，可删除. 修改post-update权限(使客户端能访问) 1sudo chmod 755 /home/git/repositories/gitosis-admin.git/hooks/post-update 获取并配置gitosis-admin [客户端] 12git clone git@xxx:gitosis-admin.git # 切换到root用户并在本地执行，获取gitosis管理项目，将会产生一个gitosis-admin的目录，里面有配置文件gitosis.conf和一个 keydir 的目录，keydir目录主要存放git用户名vi gitosis-admin/gitosis.conf # 编辑gitosis-admin配置文件 如果无法git clone的话，可以使用git clone git@xxx:/home/git/repositories/gitosis-admin.git 12345678910* 在gitosis.conf底部增加[group 组名]writable = 项目名members = 用户 # 这里的用户名字 要和 keydir下的文件名字相一致* vi下按ZZ（大写）两次会执行自动保存并退出，完成后执行cd gitosis-admingit add .git commit -a -m “xxx xx” # 要记住的是，如果每次添加新文件必须执行git add .，或者git add filename，如果没有新加文件，只是进行修改的话就可以执行此句。* 修改了文件以后一定要PUSH到服务器，否则不会生效。git push 新建项目到此步gitosis基本已经配置完成，接下来新建项目到服务器的操作，向配置文件gitosis.conf添加项目信息 123[group git-test] # 组名称writable = git-test # 项目名称members = xxx # 用户名xxx一定要与客户端使用的用户名完全一样，否则无权限操作 注意的是每次修改必须更新到git server服务器12git commit -a -m “添加新项目git-test，新项目的目录是git-test，该项目的成员是xxx“ # “”里的内容自定git push 回到客户端开发本上创建项目git-test 123456mkdir /home/user/git-testcd /home/user/git-testgit init touch README.mdgit add .git commit -a -m \"initalize git-test\" 然后将新建项目放到git server服务器上12git remote add origin git@xxx:git-test.gitgit push origin master /or/ git push -u origin master 完成后会在终端中看到gitosis-admin gitosis-admin.git git-test.git !@!#!@ 遇到的问题ERROR:gitosis.serve.main:Repository read access denied原因:gitosis.conf中的members与keydir中的用户名不一致，如gitosis中的members = Macbook@sth，但keydir中的公密名却叫Macbook.pub解决:使keydir的名称与gitosis中members所指的名称一致。 改为members = Macbook 或 公密名称改为Macbook@sth.pub","raw":null,"content":null,"categories":[{"name":"git","slug":"git","permalink":"http://kingzez.com/categories/git/"}],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://kingzez.com/tags/CentOS/"},{"name":"git","slug":"git","permalink":"http://kingzez.com/tags/git/"}]},{"title":"Mac下brew安装运行redis","slug":"Mac下brew安装运行redis","date":"2015-09-23T14:32:26.000Z","updated":"2016-05-17T16:44:37.000Z","comments":true,"path":"2015/09/23/Mac下brew安装运行redis/","link":"","permalink":"http://kingzez.com/2015/09/23/Mac下brew安装运行redis/","excerpt":"打开终端1brew install redis","keywords":null,"text":"打开终端1brew install redis 如下12345678910111213~ w$ brew install redis==&gt; Downloading https://homebrew.bintray.com/bottles/redis-3.0.0.yosemite.bottle######################################################################## 100.0%==&gt; Pouring redis-3.0.0.yosemite.bottle.tar.gz==&gt; CaveatsTo have launchd start redis at login: ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgentsThen to load redis now: launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plistOr, if you don't want/need launchctl, you can just run: redis-server /usr/local/etc/redis.conf==&gt; Summary🍺 /usr/local/Cellar/redis/3.0.0: 9 files, 892K 安装成功，启动redis1redis-server 如下1234567891011121314151617181920212223~ w$ redis-server3002:C 23 Sep 22:29:50.895 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf3002:M 23 Sep 22:29:50.897 * Increased maximum number of open files to 10032 (it was originally set to 2560). _._ _.-``__ ''-._ _.-`` `. `_. ''-._ Redis 3.0.0 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ ''-._ ( ' , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|'` _.-'| Port: 6379 | `-._ `._ / _.-' | PID: 3002 `-._ `-._ `-./ _.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | http://redis.io `-._ `-._`-.__.-'_.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | `-._ `-._`-.__.-'_.-' _.-' `-._ `-.__.-' _.-' `-._ _.-' `-.__.-' 3002:M 23 Sep 22:29:50.898 # Server started, Redis version 3.0.03002:M 23 Sep 22:29:50.898 * The server is now ready to accept connections on port 6379 服务端启动，测试客户端，打开新的终端窗口12345~ w$ redis-cli127.0.0.1:6379&gt; set foo barOK127.0.0.1:6379&gt; get foo\"bar\" ok.成功连接服务端，测试成功。","raw":null,"content":null,"categories":[{"name":"redis","slug":"redis","permalink":"http://kingzez.com/categories/redis/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://kingzez.com/tags/Mac/"},{"name":"redis","slug":"redis","permalink":"http://kingzez.com/tags/redis/"}]},{"title":"函数自调用时函数表达式和函数声明的区别","slug":"函数自调用时函数表达式和函数声明的区别","date":"2015-09-19T14:46:20.000Z","updated":"2016-05-17T16:45:00.000Z","comments":true,"path":"2015/09/19/函数自调用时函数表达式和函数声明的区别/","link":"","permalink":"http://kingzez.com/2015/09/19/函数自调用时函数表达式和函数声明的区别/","excerpt":"函数自调用时函数表达式和函数声明的区别","keywords":null,"text":"函数自调用时函数表达式和函数声明的区别 所有的function 开头的都是函数声明，在解释的时候会预处理放入堆栈1234567function () &#123;&#125;//orfunction foo() &#123;&#125; 这种写法的函数声明不会被执行，直到被显示的调用 foo();函数表达式则不同，如：1234567891011121314var foo = function() &#123;&#125;;+function() &#123;&#125;-function() &#123;&#125;(function() &#123;&#125;)//以上即为函数表达式 当以表达式(expression)开头时，语句被解释为一个表达式，自然而然会把后面的函数声明当做表达式去处理，这时候，如上，函数声明的部分会当做一个函数返回就像是(return function() {})。也只有这种情况才能在表达式的后面加括号来达到函数自调用的目的123456789101112131415+function() &#123; console.log('will be invoked');&#125;();-function() &#123; console.log('will be invoked');&#125;();(function () &#123; console.log('will be invoked');&#125;)();//注意下面的区别function() &#123; console.log('won't be invoked');&#125;()//语句是函数声明，最后面的括号会被忽略 from dayuoba","raw":null,"content":null,"categories":[{"name":"js","slug":"js","permalink":"http://kingzez.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"MySQL写入中文乱码","slug":"MySQL写入中文乱码","date":"2015-09-07T14:09:26.000Z","updated":"2016-05-17T16:45:30.000Z","comments":true,"path":"2015/09/07/MySQL写入中文乱码/","link":"","permalink":"http://kingzez.com/2015/09/07/MySQL写入中文乱码/","excerpt":"####MySQL写入中文乱码","keywords":null,"text":"####MySQL写入中文乱码 MySQL数据库出现中文乱码的原因一般是客户端、服务器、结果集、数据库的字符集不统一造成的，但不是这些都统一就不乱，其中在使用wamp的MySQL时会发现这些都统一还是乱码，全部统一为utf8,这时通过variables like \"%char%\";``1```&#10;mysql&#62; show variables like &#34;%char%&#34;;&#10;+--------------------------+-----------------------------------------------+&#10;| Variable_name | Value |&#10;+--------------------------+-----------------------------------------------+&#10;| character_set_client | utf8 |&#10;| character_set_connection | utf8 |&#10;| character_set_database | utf8 |&#10;| character_set_filesystem | binary |&#10;| character_set_results | utf8 |&#10;| character_set_server | latin1 |&#10;| character_set_system | utf8 |&#10;| character_sets_dir | f:\\wamp\\bin\\mysql\\mysql5.6.17\\share\\charsets\\ |&#10;+--------------------------+-----------------------------------------------+&#10;8 rows in set 其中character_set_server | latin1不统一，通过这条语句修改：set character_set_server=’utf8’; 情况不同，这条命令无法修改，character_set_server如果默认为latin1要永久更改，用set命令是行不通的，所以更改my.ini文件，在[mysqld]段落增加：character_set_server=utf8重启MySQL服务即可。","raw":null,"content":null,"categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://kingzez.com/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://kingzez.com/tags/MySQL/"}]},{"title":"DOM 简单操作实现多选反选","slug":"DOM 简单操作实现多选反选","date":"2015-08-24T15:59:11.000Z","updated":"2016-05-17T16:45:50.000Z","comments":true,"path":"2015/08/24/DOM 简单操作实现多选反选/","link":"","permalink":"http://kingzez.com/2015/08/24/DOM 简单操作实现多选反选/","excerpt":"DOM简单操作实现多选反选","keywords":null,"text":"DOM简单操作实现多选反选 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt; &lt;title&gt;DOM&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form&gt; Choose one:&lt;br&gt; &lt;input type=\"checkbox\" name=\"hobby\" id=\"hobby1\"&gt; 音乐 &lt;input type=\"checkbox\" name=\"hobby\" id=\"hobby2\"&gt; 登山 &lt;input type=\"checkbox\" name=\"hobby\" id=\"hobby3\"&gt; 游泳 &lt;input type=\"checkbox\" name=\"hobby\" id=\"hobby4\"&gt; 阅读 &lt;input type=\"checkbox\" name=\"hobby\" id=\"hobby5\"&gt; 打球 &lt;input type=\"checkbox\" name=\"hobby\" id=\"hobby6\"&gt; 跑步 &lt;br&gt; &lt;input type=\"button\" value = \"全选\" onclick = \"checkall();\"&gt; &lt;input type=\"button\" value = \"全不选\" onclick = \"clearall();\"&gt; &lt;p&gt;input your number，number1 to 6:&lt;/p&gt; &lt;input id=\"wb\" name=\"wb\" type=\"text\" &gt; &lt;input name=\"ok\" type=\"button\" value=\"确定\" onclick = \"checkone();\"&gt; &lt;/form&gt;&lt;script type=\"text/javascript\"&gt;function checkall()&#123;var hobby = document.getElementsByTagName(\"input\"); for(i=0; i&lt;hobby.length; i++)if(hobby[i].type ==\"checkbox\")&#123; hobby[i].checked = true;&#125;&#125;function clearall()&#123;var hobby = document.getElementsByName(\"hobby\");for(i = 0; i &lt; hobby.length; i++)&#123; hobby[i].checked =false;&#125; &#125;function checkone()&#123;var j=document.getElementById(\"wb\").value;var hobby = document.getElementById(\"hobby\" + j);hobby.checked = true;&#125;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","raw":null,"content":null,"categories":[{"name":"js","slug":"js","permalink":"http://kingzez.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"使用navigator.userAgent简单判断浏览器","slug":"使用navigator.userAgent简单判断浏览器","date":"2015-08-24T01:41:56.000Z","updated":"2016-05-17T16:35:39.000Z","comments":true,"path":"2015/08/24/使用navigator.userAgent简单判断浏览器/","link":"","permalink":"http://kingzez.com/2015/08/24/使用navigator.userAgent简单判断浏览器/","excerpt":"简单使用navigator.userAgent判断浏览器","keywords":null,"text":"简单使用navigator.userAgent判断浏览器 123456789101112131415161718192021222324252627&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;navigator&lt;/title&gt;&lt;script type=\"text/javascript\"&gt; function validB()&#123; var u_agent = navigator.userAgent; var b_name = \"不是想用的主流浏览器! \" if (u_agent.indexOf(\"Firefox\")&gt;-1) &#123; b_name=\"Firefox\"; &#125;else if (u_agent.indexOf(\"Chrome\")&gt;-1) &#123; b_name=\"Chrome\"; &#125;else if (u_agent.indexOf(\"MSIE\")&gt;-1 &amp;&amp; u_agent.indexOf(\"Trident\")&gt;-1) &#123; b_name=\"IE(8-10)\"; &#125;; document.write(\"浏览器：\"+b_name +'&lt;br&gt;'); document.write(\"u_agent:\" +u_agent); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form&gt; &lt;input type=\"button\" value=\"查看浏览器\" onclick=\"validB()\" &gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;","raw":null,"content":null,"categories":[{"name":"js","slug":"js","permalink":"http://kingzez.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"git push冲突时解决方法","slug":"git push冲突时解决方法","date":"2015-08-23T13:31:42.000Z","updated":"2016-05-17T16:41:12.000Z","comments":true,"path":"2015/08/23/git push冲突时解决方法/","link":"","permalink":"http://kingzez.com/2015/08/23/git push冲突时解决方法/","excerpt":"git push冲突时解决方法","keywords":null,"text":"git push冲突时解决方法 在使用git中多人同时修改一个文件时，比如A修改test文件并push到远程仓库，B也修改test文件并push到远程，这时Bgit push会提示相应的冲突错误。 解决方法： 第一步：从项目仓库中，创建一个新的分支，并测试合并请求中的改动 1git fetch origin 第二步: 创建本地分支local用来存放远程仓库的最新分支 1git checkout -b local origin/develop 第三步：进行合并，手动修改合并后的文件 1git merge develop 第四步：修改后按照正常的git流程进行操作 123git add -Agit commit -m \"latest\"git push OK~","raw":null,"content":null,"categories":[{"name":"git","slug":"git","permalink":"http://kingzez.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://kingzez.com/tags/git/"}]},{"title":"git创建ssh key","slug":"git创建ssh key","date":"2015-08-22T07:37:35.000Z","updated":"2016-05-21T07:49:40.000Z","comments":true,"path":"2015/08/22/git创建ssh key/","link":"","permalink":"http://kingzez.com/2015/08/22/git创建ssh key/","excerpt":"一、设置Git的username ，email：12$ git config --global user.name \"kingzez\"$ git config --global user.email \"kingzez@sina.com\"","keywords":null,"text":"一、设置Git的username ，email：12$ git config --global user.name \"kingzez\"$ git config --global user.email \"kingzez@sina.com\" 二、创建ssh密匙过程1234561.查看是否已经有了ssh密钥：cd ~/.ssh 如果没有密钥则不会有此文件夹，有则不影响，备份删除都可以2.生存密钥： $ ssh-keygen -t rsa -C “kingzez@sina.com” 3个回车，密码为空。3.操作完成生成 id_rsa和id_rsa.pub 三、添加ssh key 到github 或coding等。","raw":null,"content":null,"categories":[{"name":"git","slug":"git","permalink":"http://kingzez.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://kingzez.com/tags/git/"}]},{"title":"Sublime 常用插件","slug":"Sublime 常用插件","date":"2015-08-22T07:28:21.000Z","updated":"2016-05-17T16:42:28.000Z","comments":true,"path":"2015/08/22/Sublime 常用插件/","link":"","permalink":"http://kingzez.com/2015/08/22/Sublime 常用插件/","excerpt":"Package Control — 安装包管理 Emmet — 编码快捷键，前端必备 JS Format — JS格式化 JSHint Gutter - js语法检测","keywords":null,"text":"Package Control — 安装包管理 Emmet — 编码快捷键，前端必备 JS Format — JS格式化 JSHint Gutter - js语法检测 SideBarEnhancements — 右键菜单增强插件 Nodejs — nodejs 提示 SublimeTmpl —模板 Markdown BracketHighlight - &lt;&gt;补全 snippets - 代码补全 Goto-CSS-Declaration - css定位 HTML-CSS-JS Prettify - 代码格式化 Terminal - 打开终端 Livereload - 实时加载更新修改 Compare Side-By-Side - compare sublime版 ConvertToUTF8 utf8转换 afterglow 主题 material 主题","raw":null,"content":null,"categories":[{"name":"Sublime","slug":"Sublime","permalink":"http://kingzez.com/categories/Sublime/"}],"tags":[{"name":"Sublime","slug":"Sublime","permalink":"http://kingzez.com/tags/Sublime/"}]},{"title":"关于js的一部分书单","slug":"关于js的一部分书单","date":"2015-08-13T02:51:12.000Z","updated":"2016-05-17T16:43:31.000Z","comments":true,"path":"2015/08/13/关于js的一部分书单/","link":"","permalink":"http://kingzez.com/2015/08/13/关于js的一部分书单/","excerpt":"PPK ON Javascript Javascript权威指南 Js语言精粹","keywords":null,"text":"PPK ON Javascript Javascript权威指南 Js语言精粹 MEAN Web开发 Nodejs实战 Nodejs项目实践·构建可扩展的Web应用","raw":null,"content":null,"categories":[{"name":"js","slug":"js","permalink":"http://kingzez.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://kingzez.com/tags/js/"}]},{"title":"MEAN Web 开发","slug":"MEAN Web 开发","date":"2015-07-17T12:37:36.000Z","updated":"2016-05-17T16:34:07.000Z","comments":true,"path":"2015/07/17/MEAN Web 开发/","link":"","permalink":"http://kingzez.com/2015/07/17/MEAN Web 开发/","excerpt":"####什么是MEAN ？“MEAN是基于javascript现代web应用全栈开发工具。” 这是MEAN的作者对它下的定义。可以看出MEAN是瞄准给前后端的Javascript工程师使用的，这个工具集主要包括下面几个部分","keywords":null,"text":"####什么是MEAN ？“MEAN是基于javascript现代web应用全栈开发工具。” 这是MEAN的作者对它下的定义。可以看出MEAN是瞄准给前后端的Javascript工程师使用的，这个工具集主要包括下面几个部分 MongoDB Express AngularJS NodeJS 数据库使用MongoDB，Web框架使用Express，前端框架使用AngularJS，在NodeJS的平台下四者配合开发的Web应用，全Javascript的Web开发架构。","raw":null,"content":null,"categories":[{"name":"MEAN","slug":"MEAN","permalink":"http://kingzez.com/categories/MEAN/"}],"tags":[{"name":"MEAN","slug":"MEAN","permalink":"http://kingzez.com/tags/MEAN/"}]},{"title":"解决Mac下Sublime Text 2/3以新窗口打开文件","slug":"解决Mac下Sublime Text 23以新窗口打开文件","date":"2015-07-16T11:27:25.000Z","updated":"2016-05-17T16:33:43.000Z","comments":true,"path":"2015/07/16/解决Mac下Sublime Text 23以新窗口打开文件/","link":"","permalink":"http://kingzez.com/2015/07/16/解决Mac下Sublime Text 23以新窗口打开文件/","excerpt":"sublime text 2.x：具体设置：Preferences -&gt; Settings – Default -&gt; 搜索open_files_in_new_window，将其true 改为 false 后重启一下sublime text 2","keywords":null,"text":"sublime text 2.x：具体设置：Preferences -&gt; Settings – Default -&gt; 搜索open_files_in_new_window，将其true 改为 false 后重启一下sublime text 2 sublime text 3.x：具体设置：Preferences -&gt; Settings – User -&gt; 添加 “open_files_in_new_window”: false,重启一下sublime text 3","raw":null,"content":null,"categories":[{"name":"Mac","slug":"Mac","permalink":"http://kingzez.com/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://kingzez.com/tags/Mac/"},{"name":"Sublime","slug":"Sublime","permalink":"http://kingzez.com/tags/Sublime/"}]},{"title":"Mac OSX 10.10下使用Homebrew安装MongoDB及启动连接","slug":"Mac OSX 10.10下使用Homebrew安装MongoDB及启动连接","date":"2015-07-16T09:45:18.000Z","updated":"2016-05-17T15:34:12.000Z","comments":true,"path":"2015/07/16/Mac OSX 10.10下使用Homebrew安装MongoDB及启动连接/","link":"","permalink":"http://kingzez.com/2015/07/16/Mac OSX 10.10下使用Homebrew安装MongoDB及启动连接/","excerpt":"Homebrew是Mac OSX下一个包依赖管理工具，用它来安装软件非常的方便只需要brew install *，不用再操心安装过程中软件的依赖问题。","keywords":null,"text":"Homebrew是Mac OSX下一个包依赖管理工具，用它来安装软件非常的方便只需要brew install *，不用再操心安装过程中软件的依赖问题。 ###Homebrew 安装 1ruby -e \"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\" ###MongoDB 安装 1brew install mongodb 等待安装，我的是之前下载过所以直接安装12345678910111213~ w$brew install mongodb==&gt; Downloading https://homebrew.bintray.com/bottles/mongodb-3.0.2.yosemite.bottAlready downloaded: /Library/Caches/Homebrew/mongodb-3.0.2.yosemite.bottle.tar.gz==&gt; Pouring mongodb-3.0.2.yosemite.bottle.tar.gz==&gt; CaveatsTo have launchd start mongodb at login: ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgentsThen to load mongodb now: launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plistOr, if you don't want/need launchctl, you can just run: mongod --config /usr/local/etc/mongod.conf==&gt; Summary🍺 /usr/local/Cellar/mongodb/3.0.2: 17 files, 153M 需要测试是否安装成功，用mongod命令进行测试，执行mongod后会返回一顿错误、123~ w$mongod2015-07-16T22:45:19.706+0800 I STORAGE [initandlisten] exception in initAndListen: 29 Data directory /data/db not found., terminating2015-07-16T22:45:19.706+0800 I CONTROL [initandlisten] dbexit: rc: 100 错误信息是dbpath /data/db不存在，需要创建/data/db这个目录或者使用–dbpath参数项指定一个已经存在的目录，dbpath /data/db这个目录是用来存储MongoDB的数据文件，既然不存在我们就创建/data/db这个目录或者使用--dbpath参数项指定一个已经存在的目录。首先在终端输入cd /命令返回到磁盘根目录然后输入mkdir -p /data/db创建/data/db再次输入mongod命令启动MongoDB的服务又返回一堆错误信息 123/ w$mongod2015-07-16T22:55:10.232+0800 I STORAGE [initandlisten] exception in initAndListen: 98 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating2015-07-16T22:55:10.232+0800 I CONTROL [initandlisten] dbexit: rc: 100 不能创建/打开/data/db/mongod.lock这个文件，原因是Permission denied（权限拒绝），原因是当前用户执行mongod这个命令时，对/data/db没有操作权限，给/data/db加上权限。1sudo chown -R 当前登录的用户名 /data 再次在终端输入mongod启动MongoDB的服务123456789101112131415161718/ w$sudo chown -R w /data/ w$mongod2015-07-16T22:55:49.058+0800 I JOURNAL [initandlisten] journal dir=/data/db/journal2015-07-16T22:55:49.059+0800 I JOURNAL [initandlisten] recover : no journal files present, no recovery needed2015-07-16T22:55:49.084+0800 I JOURNAL [durability] Durability thread started2015-07-16T22:55:49.084+0800 I JOURNAL [journal writer] Journal writer thread started2015-07-16T22:55:49.085+0800 I CONTROL [initandlisten] MongoDB starting : pid=2473 port=27017 dbpath=/data/db 64-bit host=W-MacBook-Pro.local2015-07-16T22:55:49.085+0800 I CONTROL [initandlisten] db version v3.0.22015-07-16T22:55:49.085+0800 I CONTROL [initandlisten] git version: nogitversion2015-07-16T22:55:49.085+0800 I CONTROL [initandlisten] build info: Darwin yosemitevm.local 14.3.0 Darwin Kernel Version 14.3.0: Mon Mar 23 11:59:05 PDT 2015; root:xnu-2782.20.48~5/RELEASE_X86_64 x86_64 BOOST_LIB_VERSION=1_492015-07-16T22:55:49.085+0800 I CONTROL [initandlisten] allocator: system2015-07-16T22:55:49.085+0800 I CONTROL [initandlisten] options: &#123;&#125;2015-07-16T22:55:49.086+0800 I INDEX [initandlisten] allocating new ns file /data/db/local.ns, filling with zeroes...2015-07-16T22:55:49.423+0800 I STORAGE [FileAllocator] allocating new datafile /data/db/local.0, filling with zeroes...2015-07-16T22:55:49.423+0800 I STORAGE [FileAllocator] creating directory /data/db/_tmp2015-07-16T22:55:50.063+0800 I STORAGE [FileAllocator] done allocating datafile /data/db/local.0, size: 64MB, took 0.639 secs2015-07-16T22:55:50.412+0800 I NETWORK [initandlisten] waiting for connections on port 270172015-07-16T22:56:05.218+0800 I NETWORK [initandlisten] connection accepted from 127.0.0.1:49580 #1 (1 connection now open) 启动成功了，然后再打开一个新的终端窗口输入mongo命令1234/ w$mongoMongoDB shell version: 3.0.2connecting to: test&gt; OK 安装完成,可以使用。","raw":null,"content":null,"categories":[{"name":"Mac","slug":"Mac","permalink":"http://kingzez.com/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://kingzez.com/tags/Mac/"},{"name":"homebrew","slug":"homebrew","permalink":"http://kingzez.com/tags/homebrew/"},{"name":"mongodb","slug":"mongodb","permalink":"http://kingzez.com/tags/mongodb/"}]},{"title":"github的静态博客用万网解析","slug":"github的静态博客用万网解析","date":"2015-07-13T16:15:21.000Z","updated":"2016-05-17T16:32:56.000Z","comments":true,"path":"2015/07/14/github的静态博客用万网解析/","link":"","permalink":"http://kingzez.com/2015/07/14/github的静态博客用万网解析/","excerpt":"网上关于github的解析都是一带而过，下面详细说一下步骤","keywords":null,"text":"网上关于github的解析都是一带而过，下面详细说一下步骤1.首先添加解析记录类型A，主机类型默认不填，记录值填写username.github.io所ping的值。2.添加解析记录类型CNAME，主机类型为WWW，记录值填写你的username.github.io3.最后在你的静态博客根目录下创建CNAME文件，文件内容填写你所购买的域名。解析完成。","raw":null,"content":null,"categories":[{"name":"git","slug":"git","permalink":"http://kingzez.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://kingzez.com/tags/git/"},{"name":"github","slug":"github","permalink":"http://kingzez.com/tags/github/"}]},{"title":"IE6常见Bug","slug":"IE6常见Bug","date":"2014-08-30T11:39:39.000Z","updated":"2016-05-17T16:30:06.000Z","comments":true,"path":"2014/08/30/IE6常见Bug/","link":"","permalink":"http://kingzez.com/2014/08/30/IE6常见Bug/","excerpt":"1、IE6怪异解析之padding与border算入宽高原因：未加文档声明造成非盒模型解析解决方法：加入文档声明","keywords":null,"text":"1、IE6怪异解析之padding与border算入宽高原因：未加文档声明造成非盒模型解析解决方法：加入文档声明2、IE6在块元素、左右浮动、设定marin时造成margin双倍（双边距）解决方法：display:inline 3、以下三种其实是同一种bug，其实也不算是个bug，举个例子：父标签高度20，子标签11，垂直居中，20-11=9，9要分给文字的上面与下面，怎么分？IE6就会与其它的不同，所以，尽量避免。 1）字体大小为奇数之边框高度少1px解决方法：字体大小设置为偶数或line-height为偶数2）line-height，文本垂直居中差1px解决方法：padding-top代替line-height居中，或line-height加1或减13）与父标签的宽度的奇偶不同的居中造成1px的偏离解决方法：如果父标签是奇数宽度，则子标签也用奇数宽度;如果是父标签偶数宽度，则子标签也用偶数宽度 4、内部盒模型超出父级时，父级被撑大解决方法：父标签使用overflow:hidden; 5、line-height默认行高bug解决方法：line-height设值 6、行标签之间会有一小段空白解决方法：float或结构并排(可读性差，不建议) 7、标签高度无法小于19px解决方法：overflow: hidden; 8、左浮元素margin-bottom失效解决方法：显示设置高度 or 父标签设置_padding-bottom代替子标签的margin-bottom or 再放个标签让父标签浮动，子标签margin- bottom，即(margin-bottom与float不同时作用于一个标签) 9、img于块元素中，底边多出空白 解决方法：父级设置overflow: hidden; 或img { display: block; }或_margin: -5px; 10、li之间会有间距解决方法：float: left; 11、块元素中有文字及右浮动的行元素，行元素换行解决方法：将行元素置于块元素内的文字前 12、position下的left，bottom错位解决方法：为父级(relative层)设置宽高或添加*zoom:1; 13、子级中有设置position，则父级overflow失效解决方法：为父级设置position:relative;","raw":null,"content":null,"categories":[{"name":"IE","slug":"IE","permalink":"http://kingzez.com/categories/IE/"}],"tags":[{"name":"IE6","slug":"IE6","permalink":"http://kingzez.com/tags/IE6/"}]},{"title":"IE6 PNG透明问题","slug":"IE6 PNG透明问题","date":"2014-08-22T08:38:41.000Z","updated":"2016-05-17T16:29:19.000Z","comments":true,"path":"2014/08/22/IE6 PNG透明问题/","link":"","permalink":"http://kingzez.com/2014/08/22/IE6 PNG透明问题/","excerpt":"对于IE6 png 透明，解决方法很多，本文介绍的是博主经常用的的两种方法：","keywords":null,"text":"对于IE6 png 透明，解决方法很多，本文介绍的是博主经常用的的两种方法： ####第一种是：Alpha（阿尔法）修复法复制并粘贴iepngfix.htc和blank.gif到您的网站的文件夹。 CSS选择器，必须包括标签/元素对你想要PNG支持——基本上，给它一个逗号分隔的列表标记的使用。它还必须包括正确的路径。HTC相对于HTML文档位置（不相关的CSS文件！）。例如，可能像这样：123&lt;style type=\"text/css\"&gt;img, div, a, input &#123; behavior: url(/css/resources/iepngfix.htc) &#125;&lt;/style&gt; 使用起来非常简单，就这样，就可以达到IE6下png透明iepngfix.htc blank.gif下载包 ####第二种是：Unit PNG Fix 1.非常小的javascript文件:1kb! 2.解决因为IE的滤镜属性所带来的影响. 3.无论是img元素或background-image属性,都能有效果. 4.在加载页面之前就能自动运行.或者就一丁点的元素. 5.允许自动高宽. 6.使用起来超级简单.如何使用:1).下载zip 然后,添加下面的代码到你页面的头部.(一定要确保路径的正确)123 &lt;!--[if lt IE 7]&gt; &lt;script type=\"text/javascript\" src=\"unitpngfix.js\"&gt;&lt;/script&gt;&lt;![endif]--&gt; 2).添加clear.gif到你的images 文件夹中.在js文件中,修改”var clear=”images/clear.gif” 路径,为你存放clear.gif的文件路径. 3). 你的整个项目的png图片都实现了透明效果.的确非常简单吧?就2个步骤,就实现了整个站点所有png的透明效果.Uint PNG Fix下载包","raw":null,"content":null,"categories":[{"name":"IE","slug":"IE","permalink":"http://kingzez.com/categories/IE/"}],"tags":[{"name":"IE6","slug":"IE6","permalink":"http://kingzez.com/tags/IE6/"}]}]}